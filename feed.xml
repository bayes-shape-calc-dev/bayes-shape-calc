<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://bayes-shape-calc-dev.github.io/bayes-shape-calc/feed.xml" rel="self" type="application/atom+xml" /><link href="https://bayes-shape-calc-dev.github.io/bayes-shape-calc/" rel="alternate" type="text/html" /><updated>2021-11-18T19:24:00-06:00</updated><id>https://bayes-shape-calc-dev.github.io/bayes-shape-calc/feed.xml</id><title type="html">Bayesian Shape Calculation</title><subtitle>Using Bayesian inference to calculate the shape of data.</subtitle><entry><title type="html">Signal processing using shapes</title><link href="https://bayes-shape-calc-dev.github.io/bayes-shape-calc/deconvolution/calibration/mcmc/2021/12/18/signal-processing.html" rel="alternate" type="text/html" title="Signal processing using shapes" /><published>2021-12-18T00:00:00-06:00</published><updated>2021-12-18T00:00:00-06:00</updated><id>https://bayes-shape-calc-dev.github.io/bayes-shape-calc/deconvolution/calibration/mcmc/2021/12/18/signal-processing</id><author><name>Hamel Husain &amp; Jeremy Howard</name></author><category term="deconvolution" /><category term="calibration" /><category term="MCMC" /><summary type="html"></summary></entry><entry><title type="html">Signal Processing</title><link href="https://bayes-shape-calc-dev.github.io/bayes-shape-calc/2021/11/18/signal-processing.html" rel="alternate" type="text/html" title="Signal Processing" /><published>2021-11-18T00:00:00-06:00</published><updated>2021-11-18T00:00:00-06:00</updated><id>https://bayes-shape-calc-dev.github.io/bayes-shape-calc/2021/11/18/signal-processing</id><author><name></name></author><summary type="html">2021-11-18-signal-processing Signal processing using shapes&amp;#182;The following notebook deals with the issue of deconvolving a signal, in this case, the fluorescence lifetime decay curve, from a (known or unknown) instrument response function. The data shown here has been collected from real experiments by CKT. toc: true branch: master badges: true comments: false author: Hamel Husain &amp;amp; Jeremy Howard categories: [deconvolution, calibration, MCMC] In&amp;nbsp;[1]: #hide import numpy as np import matplotlib.pyplot as plt import scipy as sc import scipy.special import numba as nb from math import lgamma In&amp;nbsp;[2]: def evidence(y, x): # corresponds to Eq. 2.2.2 in SI for shape calculations N=float(x.size) ex = np.mean(x) exx = np.mean(x*x) ey = np.mean(y) eyy = np.mean(y*y) exy = np.mean(x*y) vx = exx - ex*ex vy = eyy - ey*ey vxy = exy - ex*ey v2xy = vxy*vxy r2= vxy**2./(vx*vy) m = (N-2.)/2. log_l = -m*np.log(np.pi) log_l += -N/2*np.log(N) log_l += lgamma(m) log_l += -0.5*np.log(vx) log_l += -m*np.log(vy) log_l += -m*np.log(1.-r2) log_l += np.log(1.-.5*sc.special.betainc(m,.5,1.-r2)) return log_l print(evidence(np.random.rand(4), np.random.rand(4))) 0.7120755761819708 The data collected is for the fluorescence lifetime of quininine (lit value = 19 ns) in the absence (q00) and in the presence of quenchers (q01-5). The time interval between data points is ~55ps (exact value given below). Each file comes embedded with the experimentally determined IRF (plotted below). In&amp;nbsp;[3]: time, irf_q00, decay_q00, _, _ = np.loadtxt(&amp;#39;q00_fit.txt&amp;#39;, skiprows = 58).T time = time*(0.1097394/2) In&amp;nbsp;[4]: tau = np.arange(0, 3000)*(0.1097394/2) fake_decay = np.exp(-tau/19.49) signal = np.convolve(irf_q00, fake_decay)[:time.shape[0]] plt.plot(time, irf_q00, &amp;#39;k&amp;#39;) plt.plot(time, decay_q00) plt.plot(time, 1000*signal/(signal.max())) plt.xlim(15,30) print(evidence(decay_q00, signal)) -16066.958041718837 Deconvolution based on known IRF&amp;#182;The first approach is a brute force one. 4000 points are taken between 1 and 100 (ns), and the decay curves corresponding to these points are generated. These decays are convolved with the known IRF to generate templates which are then compared with the shape of the experimental decay using a log-evidence for the shape comparison. If we assume that the prior for the lifetime is uniform, the evidence is proportional to the posterior of the lifetime. This log-evidence is plotted for the 4000 points. The MAP is printed. Notes: 1) Numpy's convolve function has three modes, 'full'(default), 'same', and 'overlap'. These determine the size of the convolved array (see docs for exact description). Ideally, since we need the same size for our template and data, one would assume that the 'same' mode is most suitable. However, I tried this and it seems 'same' truncates the convolved array in the wrong side (from the beginning and not the end). So I went with convolving in the 'full' mode, and then truncating manually. 2) There is a shift parameter in the fitting software, which for these datasets, turns up a value of 3 datapoints. For this comparison, no shift is implemented. If needed, one could marginalise or estimate it. In&amp;nbsp;[5]: y_00 = [] tau = time.copy() ts = np.linspace(1,100, 4000) for t in ts: fake_decay = np.exp(-tau/t) signal = np.convolve(irf_q00, fake_decay)[:time.shape[0]] y_00.append(evidence(decay_q00, signal)) y_00 = np.array(y_00) plt.figure(1) plt.plot(ts, y_00, &amp;#39;r&amp;#39;) plt.show() print(ts[np.argmax(y_00)]) 19.492873218304574 In&amp;nbsp;[17]: time, irf_q01, decay_q01, _, _ = np.loadtxt(&amp;#39;q01_fit.txt&amp;#39;, skiprows = 58).T time = time*(0.1097394/2) In&amp;nbsp;[245]: y_01 = [] tau = time.copy() ts = np.linspace(1,100, 4000) for t in ts: fake_decay = np.exp(-tau/t) signal = np.convolve(irf_q01, fake_decay)[:time.shape[0]] y_01.append(evidence(decay_q01, signal)) y_01 = np.array(y_01) plt.figure(1) plt.plot(ts, y_01, &amp;#39;r&amp;#39;) plt.show() print(ts[np.argmax(y_01)]) 8.822955738934734 In&amp;nbsp;[18]: time, irf_q02, decay_q02, _, _ = np.loadtxt(&amp;#39;q02_fit.txt&amp;#39;, skiprows = 58).T time = time*(0.1097394/2) In&amp;nbsp;[246]: y_02 = [] tau = time.copy() ts = np.linspace(1,100, 4000) for t in ts: fake_decay = np.exp(-tau/t) signal = np.convolve(irf_q00, fake_decay)[:time.shape[0]] y_02.append(evidence(decay_q02, signal)) y_02 = np.array(y_02) plt.figure(1) plt.plot(ts, y_02, &amp;#39;r&amp;#39;) plt.show() print(ts[np.argmax(y_02)]) 5.010502625656414 In&amp;nbsp;[19]: time, irf_q03, decay_q03, _, _ = np.loadtxt(&amp;#39;q03_fit.txt&amp;#39;, skiprows = 58).T time = time*(0.1097394/2) In&amp;nbsp;[248]: y_03 = [] tau = time.copy() ts = np.linspace(1,100, 4000) for t in ts: fake_decay = np.exp(-tau/t) signal = np.convolve(irf_q00, fake_decay)[:time.shape[0]] y_03.append(evidence(decay_q03, signal)) y_03 = np.array(y_03) plt.figure(1) plt.plot(ts, y_03, &amp;#39;r&amp;#39;) plt.show() print(ts[np.argmax(y_03)]) 7.288072018004501 In&amp;nbsp;[20]: time, irf_q04, decay_q04, _, _ = np.loadtxt(&amp;#39;q04_fit.txt&amp;#39;, skiprows = 58).T time = time*(0.1097394/2) In&amp;nbsp;[249]: y_04 = [] tau = time.copy() ts = np.linspace(1,100, 4000) for t in ts: fake_decay = np.exp(-tau/t) signal = np.convolve(irf_q00, fake_decay)[:time.shape[0]] y_04.append(evidence(decay_q04, signal)) y_04 = np.array(y_04) plt.figure(1) plt.plot(ts, y_04, &amp;#39;r&amp;#39;) plt.show() print(ts[np.argmax(y_04)]) 4.441110277569392 In&amp;nbsp;[21]: time, irf_q05, decay_q05, _, _ = np.loadtxt(&amp;#39;q05_fit.txt&amp;#39;, skiprows = 58).T time = time*(0.1097394/2) In&amp;nbsp;[250]: y_05 = [] y_p = [] tau = time.copy() ts = np.linspace(1,100, 4000) for t in ts: fake_decay = np.exp(-tau/t) signal = np.convolve(irf_q00, fake_decay)[:time.shape[0]] y_05.append(evidence(decay_q05, signal)) y_05 = np.array(y_05) plt.figure(1) plt.plot(ts, y_05, &amp;#39;r&amp;#39;) plt.show() print(ts[np.argmax(y_05)]) 3.376594148537134 The above seems to agree with both the known value for quinine and the fits. Now we see what happens when we try to introduce a different IRF to the computation. In this case, I have used a Gaussian IRF centered at 22.5ns and with a sigma of 0.1ns. The comparison with the experimental IRF is given below. In&amp;nbsp;[202]: fake_decay = np.exp(-tau/19) signal = np.convolve(irf_q00, fake_decay)[:time.shape[0]] fake_irf = np.zeros_like(irf_q00) fake_irf += 1000*np.exp(-((time - 22.5)**2)/(2*(0.1)**2)) plt.plot(time, irf_q00, &amp;#39;k&amp;#39;) plt.plot(time, fake_irf, &amp;#39;r&amp;#39;) #plt.plot(time, decay_q00) #plt.plot(time, signal/25) plt.xlim(15,30) plt.show() print(time[np.argmax(irf_q00)]) 22.4417073 In&amp;nbsp;[251]: y_00_f = [] y_p = [] tau = time.copy() ts = np.linspace(1,100, 4000) #print() for t in ts: fake_decay = np.exp(-tau/t) signal = np.convolve(fake_irf, fake_decay)[:time.shape[0]] y_00_f.append(evidence(decay_q00, signal)) y_00_f = np.array(y_00_f) plt.figure(1) plt.plot(ts, y_00, &amp;#39;k&amp;#39;) plt.plot(ts, y_00_f, &amp;#39;r&amp;#39;) plt.show() print(ts[np.argmax(y_00)]) print(ts[np.argmax(y_00_f)]) 19.492873218304574 19.715678919729932 The above curve seems to suggest that M_guess has higher evidence (area under the curve) than M_exp. Not sure how to interpret this beyond: 1) This is partly the effect of the shift parameter. Since the 'center' of the experimental IRF is not known, it is probable that the guess IRF is shifted a bit more in the correct direction. 2) This is measured against the quinine data, which has a decay slow enough that the exact form of the IRF is immaterial. IRF Calibration based on Known Decay&amp;#182;Next up, we try to estimate what the most probable width of the IRF is based on a known value of decay for a signal. For example, the literature value for the fluorescence lifetime of quinine is 19ns. If we use this value to calculate a decay, we want to find what width of IRF gives a signal which is most similar in shape to the experimental signal. Below, the posterior for the sigma of the IRF is shown, the MAP is printed and the IRF corresponding to this MAP sigma is compared to the experimentally determined IRF. In&amp;nbsp;[290]: p_irf = [] tau = time.copy() ws = np.linspace(0.005, 1, 500) fake_decay = np.exp(-tau/19.) for w in ws: fake_irf = np.zeros_like(time) fake_irf += 1000*np.exp(-((time - 22.5)**2)/(2*(w)**2)) signal = np.convolve(fake_irf, fake_decay)[:time.shape[0]] p_irf.append(evidence(decay_q00, signal)) p_irf = np.array(p_irf) plt.plot(ws, p_irf, &amp;#39;r&amp;#39;) plt.show() print(ws[np.argmax(p_irf)]) fake_irf = np.zeros_like(time) fake_irf += 1000*np.exp(-((time - 22.5)**2)/(2*(ws[np.argmax(p_irf)])**2)) plt.plot(time, irf_q00, &amp;#39;k&amp;#39;) plt.plot(time, fake_irf, &amp;#39;r&amp;#39;) plt.xlim(18,27) plt.show() 0.39781563126252506 We see that the inferred IRF looks similar to the experimental IRF. Thus, we can deconvolve in both directions, from a known IRF to an unknown decay, and from a known decay to an unknown IRF. But what happens if both are unknown? Blind Deconvolution&amp;#182;Next, we see if we can infer both the width and decay from a signal where both are not known. This process is called 'blind deconvolution'. Below, we brute force the entire 2D log-posterior for both the sigma and the lifetime. The 1D marginalised posteriors for both are shown, the MAPs are printed and the corresponding IRF/decay signal is compared to the experimental signal. In&amp;nbsp;[278]: p_blind = [] tau = time.copy() ws = np.linspace(0.005, 1, 500) ts = np.linspace(1,100, 500) for w in ws: fake_irf = np.zeros_like(time) fake_irf += 1000*np.exp(-((time - 22.5)**2)/(2*(w)**2)) p_decay = [] for t in ts: fake_decay = np.exp(-tau/t) signal = np.convolve(fake_irf, fake_decay)[:time.shape[0]] p_decay.append(evidence(decay_q00, signal)) p_blind.append(p_decay) p_blind = np.array(p_blind) p_irf = p_blind.sum(1) plt.plot(ws, p_irf, &amp;#39;r&amp;#39;) plt.show() print(ws[np.argmax(p_irf)]) fake_irf = np.zeros_like(time) fake_irf += 1000*np.exp(-((time - 22.5)**2)/(2*(ws[np.argmax(p_irf)])**2)) plt.plot(time, irf_q00, &amp;#39;k&amp;#39;) plt.plot(time, fake_irf, &amp;#39;r&amp;#39;) plt.xlim(18,27) plt.show() p_decay = p_blind.sum(0) plt.plot(ts, p_decay, &amp;#39;r&amp;#39;) plt.show() print(ts[np.argmax(p_decay)]) fake_decay = np.exp(-tau/ts[np.argmax(p_decay)]) signal = np.convolve(fake_irf, fake_decay)[:time.shape[0]] plt.plot(time, decay_q00, &amp;#39;k&amp;#39;) plt.plot(time, 1000*signal/(signal.max()), &amp;#39;r&amp;#39;) #plt.xlim(18,27) plt.show() 0.36591182364729463 19.649298597194388 In&amp;nbsp;[270]: from matplotlib import cm The surface plot of the 2D posterior is plotted below. In&amp;nbsp;[279]: t_g, w_g = np.meshgrid(ts, ws) fig, ax = plt.subplots(subplot_kw={&amp;quot;projection&amp;quot;: &amp;quot;3d&amp;quot;, &amp;quot;proj_type&amp;quot; : &amp;quot;ortho&amp;quot;}) ax.view_init(30, 45) ax.plot_surface(w_g, t_g, p_blind, cmap = cm.coolwarm, antialiased = &amp;#39;True&amp;#39;) Out[279]: &amp;lt;mpl_toolkits.mplot3d.art3d.Poly3DCollection at 0x13274b00730&amp;gt; The same is done for the dataset &quot;q01&quot;. In&amp;nbsp;[283]: p_blind_01 = [] tau = time.copy() ws = np.linspace(0.005, 1, 500) ts = np.linspace(1,100, 500) for w in ws: fake_irf = np.zeros_like(time) fake_irf += 1000*np.exp(-((time - 22.5)**2)/(2*(w)**2)) p_decay_01 = [] for t in ts: fake_decay = np.exp(-tau/t) signal = np.convolve(fake_irf, fake_decay)[:time.shape[0]] p_decay_01.append(evidence(decay_q01, signal)) p_blind_01.append(p_decay_01) p_blind_01 = np.array(p_blind_01) p_irf_01 = p_blind_01.sum(1) plt.plot(ws, p_irf_01, &amp;#39;r&amp;#39;) plt.show() print(ws[np.argmax(p_irf_01)]) fake_irf = np.zeros_like(time) fake_irf += 1000*np.exp(-((time - 22.5)**2)/(2*(ws[np.argmax(p_irf_01)])**2)) plt.plot(time, irf_q01, &amp;#39;k&amp;#39;) plt.plot(time, fake_irf, &amp;#39;r&amp;#39;) plt.xlim(18,27) plt.show() p_decay_01 = p_blind_01.sum(0) plt.plot(ts, p_decay_01, &amp;#39;r&amp;#39;) plt.show() print(ts[np.argmax(p_decay_01)]) fake_decay = np.exp(-tau/ts[np.argmax(p_decay_01)]) signal_01 = np.convolve(fake_irf, fake_decay)[:time.shape[0]] plt.plot(time, decay_q01, &amp;#39;k&amp;#39;) plt.plot(time, 1000*signal_01/(signal_01.max()), &amp;#39;r&amp;#39;) #plt.xlim(18,27) plt.show() 0.2642184368737475 8.935871743486974 In&amp;nbsp;[286]: fig, ax = plt.subplots(subplot_kw={&amp;quot;projection&amp;quot;: &amp;quot;3d&amp;quot;, &amp;quot;proj_type&amp;quot; : &amp;quot;ortho&amp;quot;}) ax.view_init(25, 35) ax.plot_surface(w_g, t_g, p_blind_01, cmap = cm.coolwarm, antialiased = &amp;#39;True&amp;#39;) Out[286]: &amp;lt;mpl_toolkits.mplot3d.art3d.Poly3DCollection at 0x132768c96d0&amp;gt; MCMC Sampling&amp;#182;Brute force grid searching is inefficient and hard to visualize, when the posterior has more than 2 dimensions. Therefore, we move to an MCMC sampling approach. First we show that our above approach of blind deconvolution for each individual signal can be replicated with MCMC. In&amp;nbsp;[3]: import emcee as mc import corner as cor from tqdm.notebook import tqdm The posterior is defined using the evidence function between the guess signal and the experimental signal as the likelihood, and using uniform priors for sigma and lifetime. sigma ~ Uniform(0., 1.) Lifetime ~ Uniform(0.,100.) In&amp;nbsp;[10]: def log_post(param, decay, time): if param[0] &amp;lt;= 0. or param[1] &amp;lt;= 0.: return -np.inf if param[0] &amp;gt; 100. or param[1] &amp;gt; 1.: return -np.inf t1 = param[0] sigma = param[1] fake_irf = np.zeros_like(time) fake_irf += 1000*np.exp(-((time - 22.5)**2)/(2*(sigma)**2)) fake_decay = np.exp(-tau/t1) signal = np.convolve(fake_irf, fake_decay)[:time.shape[0]] log_l = evidence(decay, signal) return log_l We define the same sampling condition for all datasets. The MCMC algorithm will use 50 walkers, the same initialisations, and will sample for 5000 steps, after a burn-in of 500 steps. For each dataset, the likelihood for all of the walkers are plotted both during the burn-in and production run, to ensure that the walkers are properly equilibriated during production. At the end, uncorrrelated samples are collected from the MCMC chains by only accepting samples at the interval of the maximum autocorrelation time of the chains. A corner plot of the histograms of these uncorrelated samples is generated. In&amp;nbsp;[19]: ndim = 2 nwalkers = 50 np.random.seed(666) p0 = [np.array([19., 0.1]) + 1e-6*np.random.rand(ndim) for _ in range(nwalkers)] In&amp;nbsp;[20]: sampler0 = mc.EnsembleSampler(nwalkers, ndim, log_post, args=[decay_q00, time]) In&amp;nbsp;[21]: init = 500 for i, result in enumerate(tqdm(sampler0.sample(p0,iterations = init), total = init)): pass p1 = sampler0.chain[:,-1].copy() plt.plot(sampler0.lnprobability.T, alpha = 0.1) plt.show() sampler0.reset() print(p1.shape) init = 5000 for i, result in enumerate(tqdm(sampler0.sample(p1,iterations = init), total = init)): pass plt.plot(sampler0.lnprobability.T, alpha = 0.1) plt.show() (50, 2) In&amp;nbsp;[22]: samples0 = sampler0.get_chain(flat=True)[::int(sampler0.get_autocorr_time().max())] print(samples0.shape) cor.corner(samples0) plt.show() (8334, 2) In&amp;nbsp;[74]: sampler = mc.EnsembleSampler(nwalkers, ndim, log_post, args=[decay_q01, time]) init = 500 for i, result in enumerate(tqdm(sampler.sample(p0,iterations = init), total = init)): pass p1 = sampler.chain[:,-1].copy() plt.plot(sampler.lnprobability.T, alpha = 0.1) plt.show() sampler.reset() print(p1.shape) init = 5000 for i, result in enumerate(tqdm(sampler.sample(p1,iterations = init), total = init)): pass plt.plot(sampler.lnprobability.T, alpha = 0.1) plt.show() (50, 2) In&amp;nbsp;[88]: samples = sampler.get_chain(flat=True)[::int(sampler.get_autocorr_time().max())] print(samples.shape) fig = cor.corner(samples) plt.show() (8334, 2) In&amp;nbsp;[85]: sampler2 = mc.EnsembleSampler(nwalkers, ndim, log_post, args=[decay_q02, time]) init = 500 for i, result in enumerate(tqdm(sampler2.sample(p0,iterations = init), total = init)): pass p1 = sampler2.chain[:,-1].copy() plt.plot(sampler2.lnprobability.T, alpha = 0.1) plt.show() sampler2.reset() print(p1.shape) init = 5000 for i, result in enumerate(tqdm(sampler2.sample(p1,iterations = init), total = init)): pass plt.plot(sampler2.lnprobability.T, alpha = 0.1) plt.show() (50, 2) In&amp;nbsp;[91]: samples2 = sampler2.get_chain(flat=True)[::int(sampler2.get_autocorr_time().max())] print(samples2.shape) fig = cor.corner(samples2) plt.show() (7813, 2) In&amp;nbsp;[92]: sampler3 = mc.EnsembleSampler(nwalkers, ndim, log_post, args=[decay_q03, time]) init = 500 for i, result in enumerate(tqdm(sampler3.sample(p0,iterations = init), total = init)): pass p1 = sampler3.chain[:,-1].copy() plt.plot(sampler3.lnprobability.T, alpha = 0.1) plt.show() sampler3.reset() print(p1.shape) init = 5000 for i, result in enumerate(tqdm(sampler3.sample(p1,iterations = init), total = init)): pass plt.plot(sampler3.lnprobability.T, alpha = 0.1) plt.show() (50, 2) In&amp;nbsp;[93]: samples3 = sampler3.get_chain(flat=True)[::int(sampler3.get_autocorr_time().max())] print(samples3.shape) fig = cor.corner(samples3) plt.show() (8065, 2) In&amp;nbsp;[94]: sampler4 = mc.EnsembleSampler(nwalkers, ndim, log_post, args=[decay_q04, time]) init = 500 for i, result in enumerate(tqdm(sampler4.sample(p0,iterations = init), total = init)): pass p1 = sampler4.chain[:,-1].copy() plt.plot(sampler4.lnprobability.T, alpha = 0.1) plt.show() sampler4.reset() print(p1.shape) init = 5000 for i, result in enumerate(tqdm(sampler4.sample(p1,iterations = init), total = init)): pass plt.plot(sampler4.lnprobability.T, alpha = 0.1) plt.show() (50, 2) In&amp;nbsp;[95]: samples4 = sampler4.get_chain(flat=True)[::int(sampler4.get_autocorr_time().max())] print(samples4.shape) fig = cor.corner(samples4) plt.show() (8334, 2) In&amp;nbsp;[96]: sampler5 = mc.EnsembleSampler(nwalkers, ndim, log_post, args=[decay_q05, time]) init = 500 for i, result in enumerate(tqdm(sampler5.sample(p0,iterations = init), total = init)): pass p1 = sampler5.chain[:,-1].copy() plt.plot(sampler5.lnprobability.T, alpha = 0.1) plt.show() sampler5.reset() print(p1.shape) init = 5000 for i, result in enumerate(tqdm(sampler5.sample(p1,iterations = init), total = init)): pass plt.plot(sampler5.lnprobability.T, alpha = 0.1) plt.show() (50, 2) In&amp;nbsp;[97]: samples5 = sampler5.get_chain(flat=True)[::int(sampler5.get_autocorr_time().max())] print(samples5.shape) fig = cor.corner(samples5) plt.show() (8334, 2) We see above that the results from the MCMC match the ones of the grid search relatively well. However, interestingly, in both cases, the blind deconvolution of individual signals lead to a slightly different result for the IRF. Ideally, the IRF should be the same for all signals. Can we get this consensus IRF by analysing multiple signals at once? Consensus Blind Deconvolution&amp;#182;We define a new posterior function which is capable of analysing an arbitrary numbe of decay functions simultaneously. The exact dimensionality of the posterior is determined by the input decay array. In&amp;nbsp;[30]: def log_post2(param, decay, time): if len(decay) != param.shape[0] - 1: return np.NaN if np.any(param &amp;lt;= 0.): return -np.inf if np.any(param[:-1] &amp;gt; 100.) or param[-1] &amp;gt; 1.: return -np.inf sigma = param[-1] fake_irf = np.zeros_like(time) fake_irf += 1000*np.exp(-((time - 22.5)**2)/(2*(sigma)**2)) log_l = 0 tau = time for i,t in enumerate(param[:-1]): fake_decay = np.exp(-tau/t) signal = np.convolve(fake_irf, fake_decay)[:time.shape[0]] log_l += evidence(decay[i], signal) return log_l First, we see if we can model two decays simultaneously. This is a 3-dimensional problem. The code is written so that once the decay list has been constructed, the dimensionality of the problem is set. However, the initialization array still needs to be amended in terms of dimensionality. In&amp;nbsp;[66]: decay = [decay_q00, decay_q01] ndim = len(decay) + 1 nwalkers = 50 np.random.seed(666) p0 = [np.array([15.,15., 0.1]) + 1e-6*np.random.rand(ndim) for _ in range(nwalkers)] print(log_post2(p0[0], decay, time)) sampler_all1 = mc.EnsembleSampler(nwalkers, ndim, log_post2, args=[decay, time]) init = 500 for i, result in enumerate(tqdm(sampler_all1.sample(p0,iterations = init), total = init)): pass p1 = sampler_all1.chain[:,-1].copy() plt.plot(sampler_all1.lnprobability.T, alpha = 0.1) plt.show() sampler_all1.reset() print(p1.shape) init = 5000 for i, result in enumerate(tqdm(sampler_all1.sample(p1,iterations = init), total = init)): pass plt.plot(sampler_all1.lnprobability.T, alpha = 0.1) plt.show() -40240.3395576686 (50, 3) In&amp;nbsp;[109]: samples_all1 = sampler_all1.get_chain(flat=True)[::int(sampler_all1.get_autocorr_time().max())] print(samples_all1.shape) fig = cor.corner(samples_all1) plt.show() (6098, 3) The MAPs for the decay lifetimes seem to agree with the 2D estimates. As expected, the consensus IRF sigma is estimated to be somewhere between the 2D estimates. The evolution of the likelihoods along the change also indicates that this is not a difficult space for the walkers to explore. Next, we move on to the problem of consensus blind deconvolution for all 6 decays. As can be seen, this posterior space is difficult to traverse, probably due to the high dimensionality. As a result, we start an initial run of 60 walkers for 2000 steps. Then we use the best 30 positions from those walkers at the end of their run to initialize a new set of 30 walkers. These walkers then have a burn-in of 1000 steps and a production run of 15000 steps. This allows us to pull uncorrelated samples for the posterior. In&amp;nbsp;[13]: decay = [decay_q00, decay_q01, decay_q02, decay_q03, decay_q04, decay_q05] ndim = len(decay) + 1 nwalkers = 60 np.random.seed(666) p0 = [np.array([15.,15., 15.,15.,15.,15., 0.1]) + 1e-6*np.random.rand(ndim) for _ in range(nwalkers)] print(log_post2(p0[0], decay, time)) sampler_all1 = mc.EnsembleSampler(nwalkers, ndim, log_post2, args=[decay, time]) init = 2000 for i, result in enumerate(tqdm(sampler_all1.sample(p0,iterations = init), total = init)): pass p1 = sampler_all1.chain[:,-1].copy() plt.plot(sampler_all1.lnprobability.T, alpha = 0.1) plt.show() lx = sampler_all1.lnprobability[-1,:].argsort() p1 = sampler_all1.chain[-1,lx][-int(nwalkers/2):] sampler_all2 = mc.EnsembleSampler(int(nwalkers/2), ndim, log_post2, args=[decay, time]) init = 1000 for i, result in enumerate(tqdm(sampler_all2.sample(p1,iterations = init), total = init)): pass p2 = sampler_all2.chain[:,-1].copy() plt.plot(sampler_all2.lnprobability.T, alpha = 0.1) plt.show() sampler_all2.reset() init = 15000 for i, result in enumerate(tqdm(sampler_all2.sample(p1,iterations = init), total = init)): pass plt.plot(sampler_all2.lnprobability.T, alpha = 0.1) plt.show() -128353.52673677605 In&amp;nbsp;[16]: samples_all2 = sampler_all2.get_chain(flat=True)[::int(sampler_all2.get_autocorr_time().max())] print(samples_all2.shape) fig = cor.corner(samples_all2, labels = [r&amp;#39;$\tau_{q00}$&amp;#39;, r&amp;#39;$\tau_{q01}$&amp;#39;, r&amp;#39;$\tau_{q02}$&amp;#39;, r&amp;#39;$\tau_{q03}$&amp;#39;, r&amp;#39;$\tau_{q04}$&amp;#39;, r&amp;#39;$\tau_{q05}$&amp;#39;, r&amp;#39;$\sigma$&amp;#39;]) plt.show() (5358, 7)</summary></entry><entry><title type="html">Signal processing using shapes</title><link href="https://bayes-shape-calc-dev.github.io/bayes-shape-calc/deconvolution/calibration/mcmc/2021/11/18/signal-processing.html" rel="alternate" type="text/html" title="Signal processing using shapes" /><published>2021-11-18T00:00:00-06:00</published><updated>2021-11-18T00:00:00-06:00</updated><id>https://bayes-shape-calc-dev.github.io/bayes-shape-calc/deconvolution/calibration/mcmc/2021/11/18/signal-processing</id><author><name>Hamel Husain &amp; Jeremy Howard</name></author><category term="deconvolution" /><category term="calibration" /><category term="MCMC" /><summary type="html"></summary></entry><entry><title type="html">Fastpages Notebook Blog Post</title><link href="https://bayes-shape-calc-dev.github.io/bayes-shape-calc/jupyter/2020/02/20/test.html" rel="alternate" type="text/html" title="Fastpages Notebook Blog Post" /><published>2020-02-20T00:00:00-06:00</published><updated>2020-02-20T00:00:00-06:00</updated><id>https://bayes-shape-calc-dev.github.io/bayes-shape-calc/jupyter/2020/02/20/test</id><author><name></name></author><category term="jupyter" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://bayes-shape-calc-dev.github.io/bayes-shape-calc/images/chart-preview.png" /><media:content medium="image" url="https://bayes-shape-calc-dev.github.io/bayes-shape-calc/images/chart-preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>